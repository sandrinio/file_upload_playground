{"version":3,"sources":["../../routes/posts_timeline.js"],"names":["express","require","router","Router","Posts","SeedData","get","req","res","find","$text","$search","query","search","score","$meta","sort","exec","err","data","console","log","render","lean","totalBlogPostsCount","length","pageSize","pageCount","currentPage","blogPostsArray","blogPostsList","push","splice","page","posts","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,SAASF,QAAQG,MAAR,EAAf;AACA,IAAMC,QAAQH,QAAQ,iBAAR,CAAd;AACA,IAAMI,WAAWJ,QAAQ,SAAR,CAAjB;;AAEAC,OAAOI,GAAP,CAAW,QAAX,EAAqB,UAACC,GAAD,EAAMC,GAAN,EAAa;;AAE/BJ,SAAMK,IAAN,CAAW,EAACC,OAAO,EAAEC,SAASJ,IAAIK,KAAJ,CAAUC,MAArB,EAAR,EAAX,EACmB,EAAEC,OAAO,EAACC,OAAO,WAAR,EAAT,EADnB,EAEqBC,IAFrB,CAE0B,OAF1B,EAGqBC,IAHrB,CAG0B,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAC5C,UAAGD,GAAH,EAAO;AACL,gBAAOE,QAAQC,GAAR,CAAYH,GAAZ,CAAP;AACD;AACDV,UAAIc,MAAJ,CAAW,OAAX,EAAoB,EAAEH,MAAMA,IAAR,EAApB;AACF,IARD;AASF,CAXD;;AAcAjB,OAAOI,GAAP,CAAW,WAAX,EAAwB,UAACC,GAAD,EAAMC,GAAN,EAAa;;AAErCJ,SAAMK,IAAN,CAAW,EAAX,EAAeO,IAAf,CAAoB,OAApB,EAA6BO,IAA7B,GAAoCN,IAApC,CAAyC,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAC3D,UAAGD,GAAH,EAAO;AACL,gBAAOE,QAAQC,GAAR,CAAYH,GAAZ,CAAP;AACD;AACD,UAAIM,sBAAsBL,KAAKM,MAA/B;AAAA,UACIC,WAAW,EADf;AAAA,UAEIC,YAAYH,sBAAsBE,QAAtB,GAAiC,CAFjD;AAAA,UAGIE,cAAc,CAHlB;AAAA,UAIIC,iBAAiB,EAJrB;AAAA,UAKIC,gBAAgB,EALpB;;AAOA,aAAOX,KAAKM,MAAL,GAAc,CAArB,EAAwB;AACrBI,wBAAeE,IAAf,CAAoBZ,KAAKa,MAAL,CAAY,CAAZ,EAAeN,QAAf,CAApB;AACF;AACD,UAAI,OAAOnB,IAAIK,KAAJ,CAAUqB,IAAjB,KAA0B,WAA9B,EAA2C;AACxCL,uBAAc,CAAErB,IAAIK,KAAJ,CAAUqB,IAA1B;AACF;AACDH,oBAAcI,KAAd,GAAsBL,eAAgB,CAAED,WAAF,GAAgB,CAAhC,CAAtB;AACApB,UAAIc,MAAJ,CAAW,UAAX,EAAuB;AACpBH,eAAMW,aADc;AAEpBJ,mBAAUA,QAFU;AAGpBF,8BAAqBA,mBAHD;AAIpBG,oBAAWA,SAJS;AAKpBC,sBAAaA;AALO,OAAvB;AAOF,IAzBD;AA2BC,CA7BD;;AAgCAO,OAAOC,OAAP,GAAiBlC,MAAjB","file":"posts_timeline.js","sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst Posts = require('../models/posts');\nconst SeedData = require('../seed');\n\nrouter.get('/posts', (req, res) =>{\n\n   Posts.find({$text: { $search: req.query.search }},\n                      { score: {$meta: \"textScore\"}})\n                       .sort(\"-date\")\n                       .exec(function (err, data) {\n      if(err){\n        return console.log(err)\n      }\n      res.render('posts', { data: data })\n   })\n});\n\n\nrouter.get('/posts_v2', (req, res) =>{\n\nPosts.find({}).sort('-date').lean().exec(function (err, data) {\n   if(err){\n     return console.log(err)\n   }\n   let totalBlogPostsCount = data.length,\n       pageSize = 10,\n       pageCount = totalBlogPostsCount / pageSize + 1,\n       currentPage = 1,\n       blogPostsArray = [],\n       blogPostsList = {};\n\n   while (data.length > 0) {\n      blogPostsArray.push(data.splice(0, pageSize));\n   }\n   if (typeof req.query.page !== 'undefined') {\n      currentPage = + req.query.page;\n   }\n   blogPostsList.posts = blogPostsArray[ + currentPage - 1];\n   res.render('posts_v2', {\n      data: blogPostsList,\n      pageSize: pageSize,\n      totalBlogPostsCount: totalBlogPostsCount,\n      pageCount: pageCount,\n      currentPage: currentPage\n   });\n})\n\n});\n\n\nmodule.exports = router"]}